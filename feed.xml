<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>jezenthomas.com</title>
        <link>https://jezenthomas.com</link>
        <description><![CDATA[Thoughts on Haskell, Business, Unix, and more.]]></description>
        <atom:link href="https://jezenthomas.com/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Fri, 15 Nov 2024 00:00:00 UT</lastBuildDate>
        <item>
    <title>I Feel Unsafe</title>
    <link>https://jezenthomas.com/2024/11/I-feel-unsafe/</link>
    <description><![CDATA[<p>I awoke to the sound of a violent explosion earlier than I had wanted that
morning. The walls, windows, and furniture vibrated. A cruise missile had
struck a warehouse owned by a national supermarket chain, roughly a kilometre
from the hotel I was staying in. The russians had fired it – targeting civilian
infrastructure as they regularly do – perhaps a dozen minutes earlier. It was
June 24th, 2024. The time was 07:03.</p>
<figure>
<img
    alt="Plume of smoke from russian cruise missile attack on civilian infrastructure."
    src="/static/img/i-feel-unsafe/tavriya-v.jpg">
<figcaption>
Plume of smoke from a russian cruise missile hitting a supermarket warehouse,
shot from the window of my hotel room in Odesa, Ukraine.
</figcaption>
</figure>
<p>This was hardly my first rodeo. Cruise missiles regularly flew over the
apartment I was renting in Odesa. The local air defence would light up the sky
when attacks came at night; as they often did. One attack in 2022 saw an
apartment building struck a few streets behind mine, killing a young woman and
her two children. Her husband wasn’t in the building at the time, and
distraught by the slaughter of his entire family, he joined his country’s
defence on the front line. Ultimately, he died too.</p>
<figure>
<img
    alt="Smoke trail from an air defence missile after destroying an incoming Shahed drone."
    src="/static/img/i-feel-unsafe/fontanska.jpg">
<figcaption>
Trail from an air defence missile, and the smoke from a successfully
destroyed Shahed drone, shot from the kitchen window of my rental apartment
in Odesa, October 2022.
</figcaption>
</figure>
<p>With my British passport, I have the luxury of leaving any time living in an
active war zone begins to take its toll. My closest friends however, enjoy no
such luxury. The russians came to rape, torture, and kill. Neither women nor
children are spared. Countless invaders have admitted to the brutality, at
times recounting that <a href="https://www.politico.eu/article/former-wagner-group-commanders-azmat-uldarov-alexey-savichev-confess-murder-ukraine-civilians-including-children/">even small children are executed</a> with a bullet in
the brain at point blank range. The Ukrainians have no choice but to stay and
fight.</p>
<hr />
<p>I attended NixCon a few weeks ago in Berlin. Overall I enjoyed the experience;
it feels a little less like a conference, and a little more like a get together
for the relatively small NixOS community. About half way through the
conference, the organisers announced that one attendee had been asked to leave.
They were alleged to have made another attendee “feel unsafe”.</p>
<p>I don’t know specifically what happened, beyond someone being made to “feel
unsafe”, nor do I have any reason to doubt the accusation (and I’m glad the
moderators took the complaint seriously and acted upon it).</p>
<p>What sticks in my mind is the phrase “feel unsafe”. In my experience, I’ve only
ever heard this phrase said by people who hold political views radically more
left-wing than my own (and for the avoidance of doubt, I’m a bit of a leftie).
NixCon – and perhaps the NixOS community more broadly – appears to have an
atypically high concentration of people who would describe themselves as
Marxists, or Communists, or Anarchists, <em>etc</em>.</p>
<p>Indeed, walking around the conference venue, I spotted at least two dozen Nix
hackers with radical left-wing political symbols and slogans emblazoned across
their laptops. In the heart of Berlin, the hammer and sickle is apparently fine
and reasonable.</p>
<p>My heritage is Polish. I have good memory of my great-grandmother. Her husband,
I never met. He died as a slave in a Nazi concentration camp. That side of my
family has always lived on the West side of Poland. If they had lived as far
East as they do West, then no doubt my great-grandfather would have died at the
hands of the Soviets. The Nazis and the Soviets were allied at the start of The
Second World War, so to me — and to millions of other Poles no doubt — the
hammer and sickle and the swastika are essentially interchangeable.</p>
<p>And the discomfort I experience seeing these political symbols and slogans is not
so abstract. The commonly held position among people who describe themselves as
Communist today is that Ukraine should not be given the lethal aid they need
to defend themselves from a genocide that, to date, by some estimates has seen
about a million casualties.</p>
<figure>
<img
    alt="Campaign material from a Danish revolutionary communist organisation saying 'Books, not Bombs'."
    src="/static/img/i-feel-unsafe/books-not-bombs.jpg">
<figcaption>
Campaign material from the ‘Revolutionary Communist Party’ in Denmark, who are <a href="https://marxist.dk/boeger-ikke-bomber/">explicitly against arming Ukraine</a>.
</figcaption>
</figure>
<p>The reasoning I have been able to discern for this position is:</p>
<ol type="1">
<li>Guns and bombs are bad and kill people, so the West shouldn’t make them or
send them to Ukraine.</li>
<li>Naziism is bad, and the Communists defeated the Nazis, therefore Communism
is good (conveniently forgetting the Molotov-Ribbentrop Pact).</li>
</ol>
<p>The reason why my closest friends in Odesa are not dead today is because
hundreds of thousands of brave Ukrainian men and women have been successfully
defending their country from terrorists and barbarians with the use of Western
weapons.</p>
<p>To say that Ukraine should not be given weapons is tantamount to saying that
all of my friends should be dead. And, I suppose, that I should be dead too.
It’s only blind luck that neither cruise missiles nor Shahed drones have
struck a building that I was staying in. Although come to think of it, a
Shahed drone did indeed hit a building where I used to live. Possibly even the
same floor of that building. There have been so many attacks that I don’t
perfectly recall.</p>
<p>And yet, I’ll bet that if I were to use the same phrase at that conference — if
I were to say that I “feel unsafe” — I somehow doubt that my complaint would be
taken seriously. I am — superficially anyway — not a part of the persecuted
class, so violence against me is fine.</p>
]]></description>
    <pubDate>Fri, 15 Nov 2024 00:00:00 UT</pubDate>
    <guid>https://jezenthomas.com/2024/11/I-feel-unsafe/</guid>
    <dc:creator>Jezen Thomas</dc:creator>
</item>
<item>
    <title>Is it c? Or is it с?</title>
    <link>https://jezenthomas.com/2024/07/is-it-c/</link>
    <description><![CDATA[<p>Someone working on the team at Supercede asked the following question
regarding some perplexing GHCi output.</p>
<blockquote>
<p>I must have missed something obvious because I’ve been staring myself blind
at this for the past few minutes. Isn’t it saying one thing is not in scope
and then immediately suggesting that very same thing as a replacement?</p>
</blockquote>
<div class="highlight"><pre><span></span>ghci&gt; :t API.Handler.V20201001.Types.tscaExcluded

&lt;interactive&gt;:1:1-40: error:
    Not in scope: &#39;API.Handler.V20201001.Types.tscaExcluded&#39;
    Perhaps you meant one of these:
      &#39;API.Handler.V20201001.Types.tsсaExcluded&#39; (imported from API.Handler.V20201001.Types),
</pre></div>

<p>Can you spot the error?</p>
<p>The problem could have been related to some surprising behaviour in GHCi when
references are held to old values after their names are shadowed. Or perhaps it
was something related to the build cache since we use incremental compilation.
But those would have been guesses two and three.</p>
<p>Based on experience — and some luck — here was my first guess.</p>
<blockquote>
<p>You know, we had an interesting issue once where a c was substituted for a с.
See the difference?</p>
</blockquote>
<p>Lo and behold…</p>
<blockquote>
<p>Emacs says one is a LATIN SMALL LETTER C and the other is a CYRILLIC SMALL
LETTER ES but I would never have guessed. And would you believe – this is
indeed what has happened. Wow!</p>
</blockquote>
<p>Perhaps this deserves a new linting rule.</p>
]]></description>
    <pubDate>Tue, 16 Jul 2024 00:00:00 UT</pubDate>
    <guid>https://jezenthomas.com/2024/07/is-it-c/</guid>
    <dc:creator>Jezen Thomas</dc:creator>
</item>
<item>
    <title>Kill on the Cover Letter, but Not Like That</title>
    <link>https://jezenthomas.com/2024/02/kill-on-the-cover-letter-but-not-literally/</link>
    <description><![CDATA[<p>A couple of years ago, I received the following email in response to a Haskell programming job I had advertised.</p>
<blockquote>
<p>Life is cheap. I would kill someone for a Haskell job. Thanks for your consideration.</p>
</blockquote>
<p>That was it. That was the entire email.</p>
<p>The applicant had attached their résumé to the email, and in fairness the résumé showed that this person would bring relevant and valuable experience to the team.</p>
<p>Now, I do love all sorts of humour, and I’m 99.9% certain that rather than being serious, this person was a little trigger happy with the hyperbole cannon.</p>
<p>But on the off chance that they <em>were</em> serious, how could I have it on my conscience that we ended up with a killer on the team <em>even after they told me about it</em>?! Could you imagine that tribunal?</p>
<p>I’m fortunate that when I do advertise a programming job on the internet, I’m inundated with strong applications. All of the best applications take the form of a brief couple of paragraphs in an email which describe why the applicant believes they’re a particularly good fit for the job. This is what I regard as the cover letter. The résumé should still be attached, but it’s the cover letter I’m reading first.</p>
<p>The cover letter sets the tone. It says “this is who I am, this is my understanding of what you’re looking for, and this is why I believe I’m the right choice.”</p>
<p>The cover letter is the perfect place to make the right introduction.</p>
<p>But, come on.</p>
<p>This ain’t it.</p>
]]></description>
    <pubDate>Fri, 02 Feb 2024 00:00:00 UT</pubDate>
    <guid>https://jezenthomas.com/2024/02/kill-on-the-cover-letter-but-not-literally/</guid>
    <dc:creator>Jezen Thomas</dc:creator>
</item>
<item>
    <title>Stubbing I/O in Yesod</title>
    <link>https://jezenthomas.com/2023/11/stubbing-io-in-yesod/</link>
    <description><![CDATA[<p>Here’s the scenario.</p>
<p>You’re writing a web application in Yesod. In one of your request handler
functions, you need to run some IO action. This might be to make an HTTP
request against an online weather service, or this might be to charge someone’s
credit card, or even just to generate some random number.</p>
<p>Taking the latter as an example, imagine we want to generate a random number
and then respond to the user’s request by reporting whether the randomly
generated number is even or odd.</p>
<p>We might write code which looks like this.</p>
<div class="highlight"><pre><span></span><span class="cm">{-# LANGUAGE OverloadedStrings #-}</span>
<span class="cm">{-# LANGUAGE QuasiQuotes #-}</span>
<span class="cm">{-# LANGUAGE TemplateHaskell #-}</span>
<span class="cm">{-# LANGUAGE TypeFamilies #-}</span>

<span class="kr">module</span><span class="w"> </span><span class="nn">Application</span><span class="w"> </span><span class="kr">where</span>

<span class="kr">import</span><span class="w"> </span><span class="nn">System.Random</span>
<span class="kr">import</span><span class="w"> </span><span class="nn">Yesod</span>

<span class="kr">data</span><span class="w"> </span><span class="kt">App</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">App</span>

<span class="nf">mkYesod</span><span class="w"> </span><span class="s">&quot;App&quot;</span><span class="w"> </span><span class="p">[</span><span class="n">parseRoutes</span><span class="o">|</span>
<span class="o">/</span><span class="n">random</span><span class="w"> </span><span class="kt">RandomR</span><span class="w"> </span><span class="kt">GET</span>
<span class="o">|</span><span class="p">]</span>

<span class="kr">instance</span><span class="w"> </span><span class="kt">Yesod</span><span class="w"> </span><span class="kt">App</span>

<span class="nf">getRandomR</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Handler</span><span class="w"> </span><span class="kt">Value</span>
<span class="nf">getRandomR</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kr">do</span>
<span class="w">  </span><span class="n">n</span><span class="w"> </span><span class="ow">&lt;-</span><span class="w"> </span><span class="n">liftIO</span><span class="w"> </span><span class="n">randomNumber</span>
<span class="w">  </span><span class="n">returnJson</span><span class="w"> </span><span class="o">$</span><span class="w"> </span><span class="n">isEven</span><span class="w"> </span><span class="n">n</span>
<span class="w">  </span><span class="kr">where</span>
<span class="w">    </span><span class="n">randomNumber</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">IO</span><span class="w"> </span><span class="kt">Int</span>
<span class="w">    </span><span class="n">randomNumber</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">randomRIO</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="p">)</span>

<span class="w">    </span><span class="n">isEven</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Int</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">String</span>
<span class="w">    </span><span class="n">isEven</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="n">even</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="kr">then</span><span class="w"> </span><span class="s">&quot;even&quot;</span><span class="w"> </span><span class="kr">else</span><span class="w"> </span><span class="s">&quot;odd&quot;</span>

<span class="nf">main</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">IO</span><span class="w"> </span><span class="nb">()</span>
<span class="nf">main</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">warp</span><span class="w"> </span><span class="mi">3000</span><span class="w"> </span><span class="kt">App</span>
</pre></div>

<p>This is a complete Yesod application. We can run this locally and it will be
listening for requests on port 3000. When we send requests there, we can see
our application dutifully responding with whether or not the randomly generated
number was even or odd.</p>
<div class="highlight"><pre><span></span>$<span class="w"> </span>curl<span class="w"> </span>http://localhost:3000/random
<span class="s2">&quot;even&quot;</span>

$<span class="w"> </span>curl<span class="w"> </span>http://localhost:3000/random
<span class="s2">&quot;odd&quot;</span>
</pre></div>

<p>This is all well and good, but how do we write an automated test for this? We
can’t control the randomness of our pseudo-random number generator. Similarly,
if instead of generating a random number this were an HTTP request to attempt
to charge someone’s credit card with some payment provider, <em>e.g.</em>, Stripe,
then we wouldn’t be able to write a reliable automated test for this because we
don’t control Stripe’s servers.</p>
<p>What we need to do is to <em>stub</em> out this IO action. This means that instead of
running the real implementation during the test, we swap it out for a fake
version that we <em>can</em> control.</p>
<p>One simple approach for this is with <em>dependency injection</em>.</p>
<p>Instead of defining our <code>randomNumber</code> function alongside our request handler,
we can declare it as part of our application’s foundational data type.</p>
<div class="highlight"><pre><span></span><span class="kr">data</span><span class="w"> </span><span class="kt">App</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">App</span>
<span class="w">  </span><span class="p">{</span><span class="w"> </span><span class="n">appRandomNumber</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">IO</span><span class="w"> </span><span class="kt">Int</span>
<span class="w">  </span><span class="p">}</span>
</pre></div>

<p>When we initialise our application, we construct our <code>App</code> value with the real
implementation of our function.</p>
<div class="highlight"><pre><span></span><span class="nf">main</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">IO</span><span class="w"> </span><span class="nb">()</span>
<span class="nf">main</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">warp</span><span class="w"> </span><span class="mi">3000</span><span class="w"> </span><span class="o">$</span><span class="w"> </span><span class="kt">App</span><span class="w"> </span><span class="n">randomNumber</span>
<span class="w">  </span><span class="kr">where</span>
<span class="w">    </span><span class="n">randomNumber</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="c1">-- real implementation</span>
</pre></div>

<p>Since our <code>randomNumber</code> function is no longer defined alongside our request
handler, we’ll now need to ask for that function from within the handler
instead.</p>
<div class="highlight"><pre><span></span><span class="nf">getRandomR</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Handler</span><span class="w"> </span><span class="kt">Value</span>
<span class="nf">getRandomR</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kr">do</span>
<span class="w">  </span><span class="n">n</span><span class="w"> </span><span class="ow">&lt;-</span><span class="w"> </span><span class="n">liftIO</span><span class="w"> </span><span class="o">=&lt;&lt;</span><span class="w"> </span><span class="n">getsYesod</span><span class="w"> </span><span class="n">appRandomNumber</span>
<span class="w">  </span><span class="n">returnJson</span><span class="w"> </span><span class="o">$</span><span class="w"> </span><span class="n">isEven</span><span class="w"> </span><span class="n">n</span>
<span class="w">  </span><span class="kr">where</span>
<span class="w">    </span><span class="n">isEven</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Int</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">String</span>
<span class="w">    </span><span class="n">isEven</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="c1">-- …</span>
</pre></div>

<p>This behaves exactly as it did before, but now we’re able to swap out our
<code>randomNumber</code> function for a fake version in an automated test with
<code>testModifySite</code>.</p>
<div class="highlight"><pre><span></span><span class="nf">withApp</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">SpecWith</span><span class="w"> </span><span class="p">(</span><span class="kt">TestApp</span><span class="w"> </span><span class="kt">App</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Spec</span>
<span class="nf">withApp</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">before</span><span class="w"> </span><span class="o">$</span><span class="w"> </span><span class="kr">do</span>
<span class="w">  </span><span class="n">pure</span><span class="w"> </span><span class="p">(</span><span class="kt">App</span><span class="w"> </span><span class="n">randomNumber</span><span class="p">,</span><span class="w"> </span><span class="n">id</span><span class="p">)</span>

<span class="nf">stub</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">YesodDispatch</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="ow">=&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">a</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">YesodExample</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="nb">()</span>
<span class="nf">stub</span><span class="w"> </span><span class="n">f</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">testModifySite</span><span class="w"> </span><span class="p">(</span><span class="nf">\</span><span class="n">app</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">pure</span><span class="w"> </span><span class="p">(</span><span class="n">f</span><span class="w"> </span><span class="n">app</span><span class="p">,</span><span class="w"> </span><span class="n">id</span><span class="p">))</span>

<span class="nf">spec</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Spec</span>
<span class="nf">spec</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">withApp</span><span class="w"> </span><span class="o">$</span><span class="w"> </span><span class="kr">do</span>

<span class="w">  </span><span class="n">describe</span><span class="w"> </span><span class="s">&quot;GET /random&quot;</span><span class="w"> </span><span class="o">$</span><span class="w"> </span><span class="kr">do</span>

<span class="w">    </span><span class="n">it</span><span class="w"> </span><span class="s">&quot;works with even numbers&quot;</span><span class="w"> </span><span class="o">$</span><span class="w"> </span><span class="kr">do</span>
<span class="w">      </span><span class="n">stub</span><span class="w"> </span><span class="p">(</span><span class="nf">\</span><span class="n">a</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">appRandomNumber</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">pure</span><span class="w"> </span><span class="mi">66</span><span class="w"> </span><span class="p">})</span>
<span class="w">      </span><span class="n">get</span><span class="w"> </span><span class="kt">RandomR</span>
<span class="w">      </span><span class="n">statusIs</span><span class="w"> </span><span class="mi">200</span>
<span class="w">      </span><span class="n">bodyEquals</span><span class="w"> </span><span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">even</span><span class="se">\&quot;</span><span class="s">&quot;</span>

<span class="w">    </span><span class="n">it</span><span class="w"> </span><span class="s">&quot;works with odd numbers&quot;</span><span class="w"> </span><span class="o">$</span><span class="w"> </span><span class="kr">do</span>
<span class="w">      </span><span class="n">stub</span><span class="w"> </span><span class="p">(</span><span class="nf">\</span><span class="n">a</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">appRandomNumber</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">pure</span><span class="w"> </span><span class="mi">17</span><span class="w"> </span><span class="p">})</span>
<span class="w">      </span><span class="n">get</span><span class="w"> </span><span class="kt">RandomR</span>
<span class="w">      </span><span class="n">statusIs</span><span class="w"> </span><span class="mi">200</span>
<span class="w">      </span><span class="n">bodyEquals</span><span class="w"> </span><span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">odd</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</pre></div>

<p>Of course, the usual warnings apply. There are problems that come along with
stubbing out functions — if your stub doesn’t accurately reflect what that
function <em>actually</em> does, then your test is only giving you false confidence.</p>
<p>People often say that stubbing is bad and that you shouldn’t do it. I don’t
think this advice is useful. Yes, your tests and application logic should be
pure as far as you can help it. But sometimes you really <em>do</em> need a stub.</p>
<p>A working example of this approach is <a href="https://github.com/jezen/yesod-stubbing-example">available here</a>.</p>
]]></description>
    <pubDate>Sun, 05 Nov 2023 00:00:00 UT</pubDate>
    <guid>https://jezenthomas.com/2023/11/stubbing-io-in-yesod/</guid>
    <dc:creator>Jezen Thomas</dc:creator>
</item>
<item>
    <title>Haskell Pattern: Design for Qualified Imports</title>
    <link>https://jezenthomas.com/2023/08/haskell-pattern-qualified-imports/</link>
    <description><![CDATA[<p>When you’re writing library code, design for qualified imports.</p>
<p>Let’s say we’re writing a module which is concerned with parsing email
addresses. Inside this <code>Email</code> module, a function named <code>parseEmail</code> would be
carrying more context in its name than is necessary. The name <code>parse</code> would be
sufficient.</p>
<p>When applying our parsing function in some <em>other</em> module, the name needs to be
more descriptive so that it is more obvious what kind of thing the parsing
function parses.</p>
<p>We also might need to disambiguate this parsing function from another parsing
function that may be in scope.</p>
<p>✘ <code>Email.parseEmail</code> is redundant.</p>
<p>✘ <code>parseEmail</code> makes it hard to know where the function is defined.</p>
<p>✔ <code>Email.parse</code> is easy to read.</p>
<p>✔ <code>Email.parse</code> makes it clear what kind of thing we’re parsing.</p>
<p>✔ <code>Email.parse</code> makes it clear where that function is defined.</p>
<div class="highlight"><pre><span></span><span class="kr">import</span><span class="w"> </span><span class="nn">Acme.Email</span><span class="w"> </span><span class="n">qualified</span><span class="w"> </span><span class="n">as</span><span class="w"> </span><span class="kt">Email</span><span class="w"> </span><span class="c1">-- exports `parse`, not `parseEmail`</span>

<span class="nf">main</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">IO</span><span class="w"> </span><span class="nb">()</span>
<span class="nf">main</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">print</span><span class="w"> </span><span class="o">$</span><span class="w"> </span><span class="kt">Email</span><span class="o">.</span><span class="n">parse</span><span class="w"> </span><span class="s">&quot;foo@bar.com&quot;</span>
</pre></div>

<p>The module describes the context we’re in. Sometimes we need to make
that context clearer, and sometimes the context is already clear enough.</p>
]]></description>
    <pubDate>Thu, 17 Aug 2023 00:00:00 UT</pubDate>
    <guid>https://jezenthomas.com/2023/08/haskell-pattern-qualified-imports/</guid>
    <dc:creator>Jezen Thomas</dc:creator>
</item>
<item>
    <title>Yesod Forms, Newtypes, and Smart Constructors</title>
    <link>https://jezenthomas.com/2023/06/yesod-forms-with-newtypes-and-smart-constructors/</link>
    <description><![CDATA[<p>Say we’re writing a web application, and we’re modelling a login form.</p>
<p>If the types in your system are primitive, you don’t need to do much to parse
them from values outside your system boundary, <em>i.e.</em>, those submitted by a
user through a web form.</p>
<p>It’s easy enough to use a <code>textField</code> for each field in our login form.</p>
<div class="highlight"><pre><span></span><span class="c1">-- Assume this type synonym exists for all examples in this article</span>
<span class="kr">type</span><span class="w"> </span><span class="kt">Form</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Html</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">MForm</span><span class="w"> </span><span class="p">(</span><span class="kt">HandlerFor</span><span class="w"> </span><span class="kt">App</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">FormResult</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="kt">Widget</span><span class="p">)</span>

<span class="c1">-- A login form with a single field</span>
<span class="kr">data</span><span class="w"> </span><span class="kt">LoginForm</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">LoginForm</span>
<span class="w">  </span><span class="p">{</span><span class="w"> </span><span class="n">loginFormEmail</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Text</span>
<span class="w">  </span><span class="p">}</span>

<span class="nf">loginForm</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Form</span><span class="w"> </span><span class="kt">LoginForm</span>
<span class="nf">loginForm</span><span class="w"> </span><span class="n">extra</span><span class="w"> </span><span class="ow">=</span><span class="w">  </span><span class="kr">do</span>
<span class="w">  </span><span class="n">email</span><span class="w"> </span><span class="ow">&lt;-</span><span class="w"> </span><span class="n">mreq</span><span class="w"> </span><span class="n">textField</span><span class="w"> </span><span class="s">&quot;&quot;</span><span class="w"> </span><span class="kt">Nothing</span>
<span class="w">  </span><span class="n">pure</span><span class="w"> </span><span class="p">(</span><span class="kt">LoginForm</span><span class="w"> </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">fst</span><span class="w"> </span><span class="n">email</span><span class="p">,</span><span class="w"> </span><span class="o">$</span><span class="p">(</span><span class="n">widgetFile</span><span class="w"> </span><span class="s">&quot;login&quot;</span><span class="p">))</span>
</pre></div>

<p>No surprises here.</p>
<h2 id="with-newtypes">With Newtypes</h2>
<p>What if our types aren’t exactly <code>Text</code> values, but are some kind of
equivalent type? For example, what if we’re representing our email value with a
newtype which wraps the underlying text value?</p>
<p>In Yesod, a <code>Field</code> cannot be a functor so it’s not obvious how to reuse a
<code>textField</code> and make it produce an <code>Email</code> value instead.</p>
<p>Fortunately, Yesod’s <a href="https://hackage.haskell.org/package/yesod-form">form library</a> provides <a href="https://hackage.haskell.org/package/yesod-form-1.7.4/docs/Yesod-Form-Functions.html#v:convertField"><code>convertField</code></a> to handle
this case. You apply this function to a couple of functions for converting to
and from your newtype, and a form field you wish to wrap.</p>
<div class="highlight"><pre><span></span><span class="kr">newtype</span><span class="w"> </span><span class="kt">Email</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Email</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">unEmail</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Text</span><span class="w"> </span><span class="p">}</span>

<span class="kr">data</span><span class="w"> </span><span class="kt">LoginForm</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">LoginForm</span>
<span class="w">  </span><span class="p">{</span><span class="w"> </span><span class="n">loginFormEmail</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Email</span>
<span class="w">  </span><span class="p">}</span>

<span class="nf">loginForm</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Form</span><span class="w"> </span><span class="kt">LoginForm</span>
<span class="nf">loginForm</span><span class="w"> </span><span class="n">extra</span><span class="w"> </span><span class="ow">=</span><span class="w">  </span><span class="kr">do</span>
<span class="w">  </span><span class="n">email</span><span class="w"> </span><span class="ow">&lt;-</span><span class="w"> </span><span class="n">mreq</span><span class="w"> </span><span class="p">(</span><span class="n">convertField</span><span class="w"> </span><span class="kt">Email</span><span class="w"> </span><span class="n">unEmail</span><span class="w"> </span><span class="n">textField</span><span class="p">)</span><span class="w"> </span><span class="s">&quot;&quot;</span><span class="w"> </span><span class="kt">Nothing</span>
<span class="w">  </span><span class="n">pure</span><span class="w"> </span><span class="p">(</span><span class="kt">LoginForm</span><span class="w"> </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">fst</span><span class="w"> </span><span class="n">email</span><span class="p">,</span><span class="w"> </span><span class="o">$</span><span class="p">(</span><span class="n">widgetFile</span><span class="w"> </span><span class="s">&quot;login&quot;</span><span class="p">))</span>
</pre></div>

<h2 id="with-smart-constructors">With Smart Constructors</h2>
<p>Newtype wrappers are better than working directly with primitive types, but by
themselves they don’t provide a great deal of type safety because the wrapped
data isn’t any more constrained than when it’s unwrapped.</p>
<p>To solve that, we would reach for a <a href="https://kowainik.github.io/posts/haskell-mini-patterns#smart-constructor">smart constructor</a>.</p>
<div class="highlight"><pre><span></span><span class="c1">-- Explicitly exclude the value constructor</span>
<span class="kr">module</span><span class="w"> </span><span class="nn">Email</span><span class="w"> </span><span class="p">(</span><span class="kt">Email</span><span class="p">,</span><span class="w"> </span><span class="nf">unEmail</span><span class="p">,</span><span class="w"> </span><span class="nf">email</span><span class="p">)</span><span class="w"> </span><span class="kr">where</span>

<span class="c1">-- The newtype wrapper without a record field</span>
<span class="kr">newtype</span><span class="w"> </span><span class="kt">Email</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Email</span><span class="w"> </span><span class="kt">Text</span>

<span class="c1">-- Unwrap the newtype</span>
<span class="nf">unEmail</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Email</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Text</span>
<span class="nf">unEmail</span><span class="w"> </span><span class="p">(</span><span class="kt">Email</span><span class="w"> </span><span class="n">email</span><span class="p">)</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">email</span>

<span class="c1">-- The smart constructor</span>
<span class="nf">email</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Text</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Maybe</span><span class="w"> </span><span class="kt">Email</span>
<span class="nf">email</span><span class="w"> </span><span class="n">t</span>
<span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="s">&quot;@&quot;</span><span class="w"> </span><span class="p">`</span><span class="n">isInfixOf</span><span class="p">`</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Just</span><span class="w"> </span><span class="p">(</span><span class="kt">Email</span><span class="w"> </span><span class="n">t</span><span class="p">)</span>
<span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">otherwise</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Nothing</span>
</pre></div>

<p>What if we’re using the smart constructor pattern and our newtypes can’t be
naïvely constructed? We can’t use <code>convertField</code> because the types won’t line
up.</p>
<p>Again, Yesod conveniently provides <a href="https://hackage.haskell.org/package/yesod-form-1.7.4/docs/Yesod-Form-Functions.html#v:checkMMap"><code>checkMMap</code></a> for transforming some
existing field into one that both performs validation <em>and</em> converts the
datatype. This way we can use our smart constructor in the field directly
instead of having to define validation rules in two places.</p>
<p>This function wants to ultimately produce an <code>Either msg b</code> but our smart
constructor only produces a <code>Maybe b</code>. We can use the <a href="https://hackage.haskell.org/package/errors-2.3.0/docs/Control-Error-Util.html#v:note"><code>note</code></a> function to
promote it and provide a friendly error message.</p>
<div class="highlight"><pre><span></span><span class="kr">module</span><span class="w"> </span><span class="nn">Main</span><span class="w"> </span><span class="kr">where</span>

<span class="kr">import</span><span class="w"> </span><span class="nn">Email</span>

<span class="kr">data</span><span class="w"> </span><span class="kt">LoginForm</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">LoginForm</span>
<span class="w">  </span><span class="p">{</span><span class="w"> </span><span class="n">loginFormEmail</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Email</span>
<span class="w">  </span><span class="p">}</span>

<span class="nf">loginForm</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Form</span><span class="w"> </span><span class="kt">LoginForm</span>
<span class="nf">loginForm</span><span class="w"> </span><span class="n">extra</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kr">do</span>
<span class="w">  </span><span class="n">email</span><span class="w"> </span><span class="ow">&lt;-</span>
<span class="w">    </span><span class="kr">let</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">asText</span><span class="w"> </span><span class="s">&quot;Invalid email&quot;</span>
<span class="w">        </span><span class="n">checkEmail</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">pure</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="n">note</span><span class="w"> </span><span class="n">msg</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="n">email</span>
<span class="w">     </span><span class="kr">in</span><span class="w"> </span><span class="n">mreq</span><span class="w"> </span><span class="p">(</span><span class="n">checkMMap</span><span class="w"> </span><span class="n">checkEmail</span><span class="w"> </span><span class="n">unEmail</span><span class="w"> </span><span class="n">textField</span><span class="p">)</span><span class="w"> </span><span class="s">&quot;&quot;</span><span class="w"> </span><span class="kt">Nothing</span>
<span class="w">  </span><span class="n">pure</span><span class="w"> </span><span class="p">(</span><span class="kt">LoginForm</span><span class="w"> </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">fst</span><span class="w"> </span><span class="n">email</span><span class="p">,</span><span class="w"> </span><span class="o">$</span><span class="p">(</span><span class="n">widgetFile</span><span class="w"> </span><span class="s">&quot;login&quot;</span><span class="p">))</span>
</pre></div>

<p>Since <code>checkMMap</code> runs in the <code>Handler</code> monad, you can also run IO actions or
database transactions as part of the validation step. For example, you could
query the database and check that the email address you’re trying to log in
with actually exists.</p>
<p>If you want a little more assurance, it might be worth writing a property-based
test which asserts that your functions to convert to and from your newtype
successfully <a href="https://hedgehog.qa/article/haskell-round-trip">roundtrip</a>.</p>
<p>Yesod’s form library is actually pretty powerful and satisying. It could
perhaps do with more examples of what good looks like, and hopefully this short
article helps. I’ve found that my code is generally neater when I’m able to
manage parsing/validation together at the web form level.</p>
]]></description>
    <pubDate>Wed, 14 Jun 2023 00:00:00 UT</pubDate>
    <guid>https://jezenthomas.com/2023/06/yesod-forms-with-newtypes-and-smart-constructors/</guid>
    <dc:creator>Jezen Thomas</dc:creator>
</item>
<item>
    <title>Derived Instances Can Break Smart Constructors, Too</title>
    <link>https://jezenthomas.com/2023/06/derived-instances-can-break-smart-constructors/</link>
    <description><![CDATA[<p>You know that <em>primitive obsession</em> is an anti-pattern.</p>
<div class="highlight"><pre><span></span><span class="c1">-- Bad, because it&#39;s &quot;stringly typed&quot;</span>
<span class="nf">validPassword</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Text</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Bool</span>
<span class="nf">validPassword</span><span class="w"> </span><span class="n">password</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="c1">-- …</span>
</pre></div>

<p>We’re using a <code>Text</code> value to represent a user’s password. This is bad because
there are so many possible <code>Text</code> values which would not be valid passwords.</p>
<p>For example, <code>"letmein"</code> is too short to be a valid password.</p>
<p>Ideally, you want to parse values into narrower types at the boundaries of your
system. This saves you from having to program defensively throughout your
codebase.</p>
<p>To this end, you introduce a new type which wraps a text value and models the
concept of a password.</p>
<div class="highlight"><pre><span></span><span class="kr">newtype</span><span class="w"> </span><span class="kt">Password</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Password</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">unPassword</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Text</span><span class="w"> </span><span class="p">}</span>

<span class="nf">validPassword</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Password</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Bool</span>
<span class="nf">validPassword</span><span class="w"> </span><span class="n">password</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="c1">-- …</span>
</pre></div>

<p>This is better, but it’s still pretty weak. We’ve introduced a different name
in the type signature so it’s harder to confuse this value for some other
text value. The problem is that you can construct a <code>Password</code> value from
literally <em>any</em> text value. This leads to invalid values floating through your
system.</p>
<p>We can fix that by writing a <a href="https://kowainik.github.io/posts/haskell-mini-patterns#smart-constructor">smart constructor</a>.</p>
<div class="highlight"><pre><span></span><span class="c1">-- Careful what we export from this module. Hide that constructor.</span>
<span class="kr">module</span><span class="w"> </span><span class="nn">Model.Password</span>
<span class="w">  </span><span class="p">(</span><span class="w"> </span><span class="kt">Password</span><span class="w">    </span><span class="c1">-- abstract, hiding the constructor</span>
<span class="w">  </span><span class="p">,</span><span class="w"> </span><span class="nf">unPassword</span><span class="w">  </span><span class="c1">-- unwrap a password</span>
<span class="w">  </span><span class="p">,</span><span class="w"> </span><span class="nf">password</span><span class="w">    </span><span class="c1">-- only way to build a password</span>
<span class="w">  </span><span class="p">)</span><span class="w"> </span><span class="kr">where</span>

<span class="c1">-- Our type wraps a Text value. No record field here!</span>
<span class="kr">newtype</span><span class="w"> </span><span class="kt">Password</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Password</span><span class="w"> </span><span class="kt">Text</span>

<span class="c1">-- Unwrap a &#39;Password&#39;</span>
<span class="nf">unPassword</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Password</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Text</span>
<span class="nf">unPassword</span><span class="w"> </span><span class="p">(</span><span class="kt">Password</span><span class="w"> </span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">p</span>

<span class="c1">-- Try to construct a &#39;Password&#39;</span>
<span class="nf">password</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Text</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Either</span><span class="w"> </span><span class="kt">Text</span><span class="w"> </span><span class="kt">Password</span>
<span class="nf">password</span><span class="w"> </span><span class="n">t</span>
<span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">8</span><span class="w">    </span><span class="ow">=</span><span class="w"> </span><span class="kt">Left</span><span class="w"> </span><span class="s">&quot;Password is too short&quot;</span>
<span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">length</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">64</span><span class="w">   </span><span class="ow">=</span><span class="w"> </span><span class="kt">Left</span><span class="w"> </span><span class="s">&quot;Password is too long&quot;</span>
<span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&quot;password&quot;</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Left</span><span class="w"> </span><span class="s">&quot;Password is too predictable&quot;</span>
<span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">otherwise</span><span class="w">       </span><span class="ow">=</span><span class="w"> </span><span class="kt">Right</span><span class="w"> </span><span class="p">(</span><span class="kt">Password</span><span class="w"> </span><span class="n">t</span><span class="p">)</span>
</pre></div>

<p>This module uses explicit exports, because it’s important that the value
constructor for <code>Password</code> remains internal to this module. The only way the we
can construct a <code>Password</code> value outside of this module is by applying the
exposed <code>password</code> function.</p>
<p>The <code>newtype</code> declaration does not have a record field, because <a href="https://taylor.fausak.me/2018/03/16/record-fields-break-smart-constructors/">record fields
break smart constructors</a>. Instead, we introduce another simple function for
unwrapping the <code>newtype</code> to get to the text value underneath<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p>
<p>The <code>password</code> function guards against a few invalid cases and allows us to
construct a valid <code>Password</code> value<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>. This is what people mean when they say
<em>correct by construction</em>.</p>
<p>This is a solid improvement over the <em>stringly typed</em> approach that we started
with, but there’s another potential pitfall that I ran into while refactoring
some code recently.</p>
<p>In a web application you often want to serialise and deserialise values between
different representations, <em>e.g.</em>, JSON, XML, URI path pieces, <em>etc.</em> This is
typically done with typeclasses — you have a typeclass called <code>FromJSON</code> with a
polymorphic method which parses some JSON into some other type, and then you
write an <em>instance</em> of that typeclass for each type that you’d like to apply
that parsing function to.</p>
<p>When you have a <code>newtype</code> which wraps some primitive text value, it can be
tempting to ask the compiler to <em>derive</em> the <code>FromJSON</code> instance using the
<code>GeneralizedNewtypeDeriving</code> language extension. It’s less code to write and
maintain, and in many cases you will indeed want a typeclass instance that is
the same as the instance of the underlying type.</p>
<div class="highlight"><pre><span></span><span class="cm">{-# LANGUAGE GeneralizedNewtypeDeriving #-}</span>

<span class="kr">newtype</span><span class="w"> </span><span class="kt">Password</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Password</span><span class="w"> </span><span class="kt">Text</span>
<span class="w">  </span><span class="kr">deriving</span><span class="w"> </span><span class="kt">FromJSON</span><span class="w"> </span><span class="c1">-- here&#39;s your problem</span>
</pre></div>

<p>When you’re using smart constructors however, this will lead to invalid data
flowing through your system because like record fields, this is also a way to
circumvent the validation performed by the smart constructor.</p>
<p>Potentially adding to the confusion, we’re not protected by our careful use of
module exports here. Typeclass instances in Haskell are always exported and
imported between modules!</p>
<p>Fixing this is simple — just manually write the instance.</p>
<div class="highlight"><pre><span></span><span class="cm">{-# LANGUAGE LambdaCase #-}</span>

<span class="kr">newtype</span><span class="w"> </span><span class="kt">Password</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Password</span><span class="w"> </span><span class="kt">Text</span>

<span class="kr">instance</span><span class="w"> </span><span class="kt">FromJSON</span><span class="w"> </span><span class="kt">Password</span><span class="w"> </span><span class="kr">where</span>
<span class="w">  </span><span class="n">parseJSON</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="nf">\</span><span class="kr">case</span>
<span class="w">    </span><span class="p">(</span><span class="kt">String</span><span class="w"> </span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span>
<span class="w">      </span><span class="kr">case</span><span class="w"> </span><span class="n">password</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="kr">of</span>
<span class="w">        </span><span class="kt">Left</span><span class="w"> </span><span class="n">err</span><span class="w"> </span><span class="ow">-&gt;</span>
<span class="w">          </span><span class="n">fail</span><span class="w"> </span><span class="o">$</span><span class="w"> </span><span class="s">&quot;Could not parse Password: &quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">unpack</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">&quot;; &quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">err</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">&quot;.&quot;</span>
<span class="w">        </span><span class="kt">Right</span><span class="w"> </span><span class="n">pass&#39;</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">pure</span><span class="w"> </span><span class="n">pass&#39;</span>
<span class="w">    </span><span class="kr">_</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">fail</span><span class="w"> </span><span class="s">&quot;Could not parse Password - was not a String&quot;</span>
</pre></div>

<p>Despite these two pitfalls, smart constructors are a good return on investment.
Just be sure you don’t accidentally introduce ways to circumvent the protection
that they provide.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>You probably never want to do this with a <em>password</em>, but you often need
to unwrap a value like this to do something with the underlying value, like
print it on the screen (or, a web page).<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>You could also have this produce a <code>Maybe Password</code>, but the extra
context around why validation can fail here is interesting.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
]]></description>
    <pubDate>Fri, 09 Jun 2023 00:00:00 UT</pubDate>
    <guid>https://jezenthomas.com/2023/06/derived-instances-can-break-smart-constructors/</guid>
    <dc:creator>Jezen Thomas</dc:creator>
</item>
<item>
    <title>Please Don't Kill Me, Google Maps</title>
    <link>https://jezenthomas.com/2023/04/google-maps-please-dont-kill-me/</link>
    <description><![CDATA[<p>Google Maps has a <em>clever</em> feature where it will dynamically reconsider your
route if it thinks it can save you time.</p>
<p>In general, this makes sense. In most cases people would prefer to save time,
and spending less time running an internal combustion engine is better for the
environment. I get it.</p>
<p>What bothers me about this feature is that you <em>can’t turn it off</em>.</p>
<p>I can only assume a product manager in California has decided that <em>Google
knows best</em>, so why would anyone want to turn this feature off?</p>
<hr />
<p>Last year I had to drive from Odessa, Ukraine, to Chișinău airport in Moldova.
Before setting off, I input my destination, and Google Maps dutifully presented
me with a choice of two routes.</p>
<p>I chose the route I found most sensible, even though it’s slightly longer.</p>
<p>While driving, the route guidance drew my attention away from what was
otherwise a rather comfortable journey through Ukrainian vineyards. Google
Maps directed me to leave the road to the Palanca border crossing — a road I
was already somewhat familiar with.</p>
<p>Google Maps had identified a faster route. Google Maps decided to switch me to
the faster route, unless I promptly cancelled the switch by tapping a button on
my telephone within a window of only a few seconds. This prompt is easy to
miss, especially if — as is quite common when operating a motor vehicle — you
are already using your eyes to see where you are going.</p>
<p>The problem with the optimised route Google Maps wanted to guide me towards is
that it runs through Transnistria.</p>
<p>Transnistria is not a real country. It’s actually a sliver of Moldova’s
territory which has been militarily occupied by the terrorist state of russia
since the collapse of the Soviet Union.</p>
<p>Google Maps already provides the user with the option to avoid motorways and
tolls. Perhaps Google Maps should also allow the user to avoid wars?</p>
<p>I chose my route specifically because I don’t want to drive towards a barrage
of machine gun fire. I would prefer for my vehicle to have the same number of
holes in it as it did when it came off the production line, and I would indeed
prefer for my internal organs to remain internal.</p>
<p>I understand some Californian environmentalists will be distressed that my
chosen route displaces a few more hydrocarbons, but ideally — if at all
possible — I don’t want to die in a fucking war.</p>
<p>Is that so much to ask, Google?</p>
]]></description>
    <pubDate>Sun, 23 Apr 2023 00:00:00 UT</pubDate>
    <guid>https://jezenthomas.com/2023/04/google-maps-please-dont-kill-me/</guid>
    <dc:creator>Jezen Thomas</dc:creator>
</item>
<item>
    <title>Make Your Types Smaller</title>
    <link>https://jezenthomas.com/2022/12/make-your-types-smaller/</link>
    <description><![CDATA[<p>Dragons lie at the boundaries of systems.</p>
<p>But where those boundaries lie is too often in a software developer’s blind spot.</p>
<p>A clear system boundary in a web application is a form. We know not to trust
user input, and so we diligently validate — both client-side and server-side —
the user’s submission.</p>
<p>Once the submission has crossed <em>that</em> threshold however, I think we lower our guard.</p>
<p>The database also exists beyond a system boundary. Programming language
peculiarities should probably not leak into the database, and vice versa.</p>
<p>It is generally understood how to use techniques such as <a href="https://wiki.haskell.org/Smart_constructors">smart
constructors</a> to ensure a value floating through the system is always valid,
but I think <em>when</em> to use a technique like this is something that programmers
have difficulty developing an intuition for.</p>
<p>It may be because of the <em>adjacency</em> of the database conceptually to the data
types that model the values the database will eventually contain; but I have
noticed — across several open-source projects — that <a href="https://wiki.c2.com/?PrimitiveObsession">primitive obsession</a>
creeps in when defining persistent models.</p>
<p>It’s not an unreasonable thought pattern: you know you want to model a <code>User</code>
in your system. Your <code>User</code> model will be persisted in the <code>users</code> table. Your
<code>User</code> has a <code>name</code> field, which will be persisted in a column with a <code>VARCHAR</code>
(or <code>TEXT</code>) type.</p>
<p>So you define your persistent model this way:</p>
<div class="highlight"><pre><span></span>User
  name Text
  dateOfBirth Day
  email Text
  UniqueEmail email
  -- etc…
</pre></div>

<p>The problem of course is that the <a href="https://en.wikibooks.org/wiki/A-level_Computing/AQA/Paper_2/Fundamentals_of_functional_programming/Basics_of_functional_programming">domain</a> for the <code>name</code> field (and also
the email field) is much larger than we want. Even taking into account
<a href="https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/">falsehoods programmers believe about names</a>, a name is not just <em>any</em> text
value. We need to enforce some rules. We need to reduce our problem space. We
need to <em>make it smaller</em>.</p>
<p>For example, we wouldn’t want a user with an empty string for a name:</p>
<div class="highlight"><pre><span></span><span class="kt">User</span>
<span class="w">  </span><span class="p">{</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="s">&quot;&quot;</span>
<span class="w">  </span><span class="p">,</span><span class="w"> </span><span class="n">dateOfBirth</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="c1">-- …</span>
<span class="w">  </span><span class="c1">-- etc…</span>
</pre></div>

<p>We also wouldn’t want <em>this</em> monstrosity<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>:</p>
<div class="highlight"><pre><span></span><span class="kt">User</span>
<span class="w">  </span><span class="p">{</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="s">&quot;V̥̝̣̤͇̮̣̦ͮͬ̇͌̕͟l̲̩̠̬͆ͪ͒͌̿ͧ̅͊͘a̷̙̾́̐͌̀ͥ̂̅͝ḓͤͣ̅͂̂ͩ̆͡ò̲̙͙̗̳̻̠̀l̥̮͈̫̻̤̞̿͛ͧ̄͒͋̅̂ͩ͘f̸̮̩̫̺̾͊̌̌ͫ̀͟ͅ ̥ͪ͋͞P̟̻̝͕̩͎̞ͭ̾ͧ͗̆̉u̶͍̱̭͎̓͋̓͂͗ͧͯ͡ͅͅt̸̯̜̟̥̋ͬͦ͂͆͘͟l̯͉͉̤ͣe̱̟̮̖̋ͦ̌͒͂͆ͪ͌͘r͚͛̒͗̔͊̚͘&quot;</span>
<span class="w">  </span><span class="p">,</span><span class="w"> </span><span class="n">dateOfBirth</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="c1">-- …</span>
<span class="w">  </span><span class="c1">-- etc…</span>
</pre></div>

<p>It’s all very well telling ourselves that this wouldn’t happen to us because we
are running a comprehensive validation function when processing the form submission
that ingests this data, but the reality is that in a non-trivial business your
database is going to have more than one entry point. Expediency and technical debt
are facts of life.</p>
<p>A persistent model with a bunch of fields representing primitive values like
<code>Text</code> is a code smell. When we see it, it’s telling us that we should <em>make
our types smaller</em>. That is to say, more specific.</p>
<p>Perhaps what we want instead is something like this:</p>
<div class="highlight"><pre><span></span><span class="p">[</span><span class="n">st</span><span class="o">|</span>
<span class="w">  </span><span class="c1">-- Our User type with more specific types in its fields</span>
<span class="w">  </span><span class="kt">User</span>
<span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="kt">Username</span><span class="w"> </span><span class="c1">-- This type is smaller!</span>
<span class="w">    </span><span class="n">dateOfBirth</span><span class="w"> </span><span class="kt">Day</span>
<span class="w">    </span><span class="n">email</span><span class="w"> </span><span class="kt">Email</span>
<span class="w">    </span><span class="kt">UniqueEmail</span><span class="w"> </span><span class="n">email</span>
<span class="w">    </span><span class="c1">-- etc…</span>
<span class="o">|</span><span class="p">]</span>

<span class="c1">-- Introduce a Username type which wraps a text value</span>
<span class="c1">-- Keep this in a different module, and be sure not to expose the constructor!</span>
<span class="kr">newtype</span><span class="w"> </span><span class="kt">Username</span><span class="w">  </span><span class="ow">=</span><span class="w"> </span><span class="kt">Username</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">unUsername</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Text</span><span class="w"> </span><span class="p">}</span>

<span class="c1">-- The &quot;smart constructor&quot; which enforces validation rules</span>
<span class="c1">-- Only expose this one!</span>
<span class="nf">mkUsername</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Text</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Maybe</span><span class="w"> </span><span class="kt">Username</span>
<span class="nf">mkUsername</span><span class="w"> </span><span class="n">t</span>
<span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&quot;&quot;</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Nothing</span>
<span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">failsSomeOtherValidationRule</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Nothing</span>
<span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">otherwise</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Just</span><span class="w"> </span><span class="p">(</span><span class="kt">Username</span><span class="w"> </span><span class="n">t</span><span class="p">)</span>

<span class="c1">-- Teach our program to marshal values over the system boundary</span>
<span class="kr">instance</span><span class="w"> </span><span class="kt">PersistField</span><span class="w"> </span><span class="kt">Username</span><span class="w"> </span><span class="kr">where</span>
<span class="w">  </span><span class="n">toPersistValue</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="c1">-- unwrap value</span>
<span class="w">  </span><span class="n">fromPersistValue</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="c1">-- parse value into narrower type</span>
</pre></div>

<p>It may seem more expensive to use a more specific type because you then need to
take the time to teach your program how to marshal values across that
application/database boundary, but I think this one-time cost is cheaper than
having to code defensively in perpetuity.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Fun Fact: For quite a long time, Twitter happily accepted Zalgo input in tweets, allowing anyone to turn the timelines of other users into an incomprehensible mess.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
]]></description>
    <pubDate>Sat, 31 Dec 2022 00:00:00 UT</pubDate>
    <guid>https://jezenthomas.com/2022/12/make-your-types-smaller/</guid>
    <dc:creator>Jezen Thomas</dc:creator>
</item>
<item>
    <title>Make Your Database Tables Smaller</title>
    <link>https://jezenthomas.com/2022/12/make-your-database-tables-smaller/</link>
    <description><![CDATA[<p>Every so often I will inspect the data that I’m storing in a web application
and find columns that are near enough totally unused. This is a strong signal
that the feature which relied on the column is not valuable, and the column along
with the feature can and should be deleted.</p>
<p>This is a good thing.</p>
<p>One of the best moves you can make is to <a href="https://dev.tube/video/Ed94CfxgsCA">delete your code</a>.</p>
<hr />
<p>We often talk about reducing the scope of a problem until it fits inside your
head. I think a similar principle often applies with database tables — a page
of results when running <code>SELECT * FROM …</code> should be narrow enough to fit on the
average laptop screen without wrapping.</p>
<p>If the table is too wide, look for columns that share some narrow domain —
narrower than whatever domain is shared by the rest of the columns in that
table. Does your <code>users</code> table have a few columns prefixed with <code>oidc</code> for
<em>single sign-on</em> authentication? Those should probably be in their own table.
Joins are cheap. Normalise earlier.</p>
<p>Sometimes for the sake of expediency people will throw a collection of keys and
values into a single cell, encoded as JSON. I have done this, and I have
encouraged others to do this. This can be all the more tempting given the JSON
operators provided in PostgreSQL.</p>
<p>In retrospect, I think this approach has been a false economy. It has most
often caused more pain which could have been avoided with a relatively small
portion of diligence. It may seem like persisting data in a flexible schema is
<em>smaller</em> — perhaps because there are fewer columns in the table or because
less effort is required upfront — but then querying becomes harder, analysis
becomes harder, and data transformation becomes harder.</p>
<p>Finally, language implementation details shouldn’t leak into the database. In
the past — again for the sake of expediency — I have persisted values in the
database with exactly the same representation as Haskell would use when
printing that value to the screen. This means I would see the skeletons of
<code>newtype</code> wrappers in the database, <em>e.g.</em>,</p>
<div class="highlight"><pre><span></span>db=# select customer_id from subscriptions;
                  customer_id
--------------------------------------------------
 CustomerKey {unCustomerKey = cus_Buc4bl7hPFJfcC}
 CustomerKey {unCustomerKey = Cus_LO80QORn3LnNPV}
 CustomerKey {unCustomerKey = Cus_GoRq02qsQbd3st}
</pre></div>

<p>The serialisation for this type is generated by the following Template Haskell:</p>
<div class="highlight"><pre><span></span><span class="nf">derivePersistField</span><span class="w"> </span><span class="s">&quot;CustomerId&quot;</span>
</pre></div>

<p>This is enticing because the amount of code is small, but as before, the data
is now harder to work with and the signal to noise ratio is worse.</p>
<p>Writing the persistence instances by hand to wrap and unwrap the inner values
for retrieval and storage respectively might require five times the number of
lines of code, but it would make the <em>problem space</em> smaller.</p>
<p>It’s a little extra work up front, but the benefits of making investments like
this compound over time. And making choices in software engineering is all
about good <em>economics</em>.</p>
]]></description>
    <pubDate>Wed, 28 Dec 2022 00:00:00 UT</pubDate>
    <guid>https://jezenthomas.com/2022/12/make-your-database-tables-smaller/</guid>
    <dc:creator>Jezen Thomas</dc:creator>
</item>

    </channel>
</rss>
